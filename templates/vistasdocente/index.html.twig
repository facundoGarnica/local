{% extends 'base.html.twig' %}

{% block title %}DOCENTES{% endblock %}

{% block javascripts %}
    {{ parent() }}

    {# Script para dirigir a la cursada seleccionada y poder asignar las notas #}

        

    {# Script para dirigir a la cursada seleccionada y pasar Asistencia #}
        <script>
         function showListaNueva(cursoId) {
        selectedCursoId = cursoId;
        console.log("Curso ID recibido:", cursoId);
    
        // Oculta la lista de profesores y asignaturas
        const listaProfesores = document.getElementById('tablaTecnicaturas');
        if (listaProfesores) {
            listaProfesores.style.display = 'none';
        }
    
        const curso = cursosData[cursoId];
    
        if (curso) {
            // Actualiza el título y la información del curso
            document.querySelector('.curso-titulo').textContent = curso.asignatura;
            document.querySelector('.curso-info h2 span').textContent = curso.asignatura;
            document.querySelector('.curso-info h3 span:nth-child(1)').textContent = curso.anio;
            document.querySelector('.curso-info h3 span:nth-child(2)').textContent = curso.comision;
    
            const tbody = document.querySelector('.curso-tabla tbody');
            tbody.innerHTML = ''; // Limpia la tabla antes de agregar nuevas filas
    
            let presentes = 0;
    
            curso.cursadas.forEach(cursada => {
                const alumno = cursada.alumno;
                const ultimaAsistencia = cursada.asistencias.length > 0
                    ? cursada.asistencias[cursada.asistencias.length - 1]
                    : null;
    
                const row = document.createElement('tr');
                row.classList.add('fila-alumno');
    
                row.innerHTML = `
                    <td class="alumno-nombre">${alumno.nombre}</td>
                    <td class="alumno-apellido">${alumno.apellido}</td>
                    <td class="alumno-dni">${alumno.dni}</td>
                    <td class="alumno-asistencia">
                        <span class="estado-asistencia ${ultimaAsistencia ? ultimaAsistencia.asistencia.toLowerCase() : 'no-marcado'}">
                            ${ultimaAsistencia ? ultimaAsistencia.asistencia : 'No marcado'}
                        </span>
                    </td>
                    <td class="alumno-observacion">${ultimaAsistencia ? ultimaAsistencia.observacion : ''}</td>
                    <td class="alumnoeditar">
                          <button onclick="CambiarEstadoEditar();editarAsistencia(${cursoId}, ${cursada.id})">Editar</button>
                          
                    </td>
                `;
    
                tbody.appendChild(row);
    
                if (ultimaAsistencia && ultimaAsistencia.asistencia.toLowerCase() === 'presente') {
                    presentes++;
                }
            });
    
            // Actualiza el total de presentes
            const totalPresentes = document.querySelector('.total-presentes');
            if (totalPresentes) {
                totalPresentes.textContent = `Alumnos presentes: ${presentes}`;
            }
    
            // Muestra la tabla
            document.getElementById('ListaNueva').style.display = 'block';
        } else {
            console.error("No se encontró el curso con ID:", cursoId);
        }
    }
        let modalAbierto = false;

          
                        function abrirPasarAsistenciaModal() {
                    if (modalAbierto) {
                        console.log('El modal ya está abierto.');
                        return; // Evita abrir el modal si ya está abierto
                    }
                
                    // Reiniciar el índice del array
                    indiceActual = 0;
                
                    // Mostrar overlay y modal
                    document.getElementById('spa-overlay').style.display = 'block';
                    document.getElementById('PasarAsistenciaModal').style.display = 'block';
                
                    // Cargar el primer alumno
                    mostrarAlumno(indiceActual);
                
                    // Cambiar el estado del modal a abierto
                    modalAbierto = true;
                }
        
                    function editarAsistencia(cursoId, cursadaId) {
        fetch(`/local/public/index.php/actualizar-lista-alumnos/${cursoId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Error al obtener los datos actualizados');
                }
                return response.json();
            })
            .then(data => {
                const cursadaIndex = cursosData[cursoId].cursadas.findIndex(c => c.id === cursadaId);
                if (cursadaIndex === -1) {
                    console.error("No se encontró la cursada con ID:", cursadaId);
                    return;
                }
    
                // Actualiza el índice actual al del alumno que se está editando
                indiceActual = cursadaIndex;
    
                const cursada = cursosData[cursoId].cursadas[cursadaIndex];
                const alumno = cursada.alumno;
                const ultimaAsistencia = cursada.asistencias.length > 0
                    ? cursada.asistencias[cursada.asistencias.length - 1]
                    : null;
    
                const alumnoNombreElemento = document.querySelector('.AlumnoNombre');
                const alumnoDniElemento = document.querySelector('.AlumnoDni');
                const spanEstado = document.querySelector('.estado-text');
                const observacionInput = document.getElementById('observacion-input');
    
                if (alumnoNombreElemento && alumnoDniElemento) {
                    alumnoNombreElemento.textContent = `${alumno.nombre} ${alumno.apellido}`;
                    alumnoDniElemento.textContent = `DNI: ${alumno.dni}`;
                }
    
                if (ultimaAsistencia) {
                    spanEstado.textContent = ultimaAsistencia.asistencia;
                    spanEstado.className = 'estado-text estado-' + ultimaAsistencia.asistencia.toLowerCase().replace(' ', '');
                    observacionInput.value = ultimaAsistencia.observacion || '';
                } else {
                    spanEstado.textContent = 'No marcado';
                    spanEstado.className = 'estado-text estado-neutral';
                    observacionInput.value = '';
                }
    
                document.getElementById('spa-overlay').style.display = 'block';
                document.getElementById('PasarAsistenciaModal').style.display = 'block';
                modalAbierto = true;
            })
            .catch(error => console.error('Error al cargar los datos del alumno:', error));
    }
        // Función para cerrar el modal
        function cerrarPasarAsistenciaModal() {
            if (!modalAbierto) {
                console.log('El modal ya está cerrado.');
                return; // Evita intentar cerrar el modal si ya está cerrado
            }
        
            // Ocultar overlay y modal
            document.getElementById('spa-overlay').style.display = 'none';
            document.getElementById('PasarAsistenciaModal').style.display = 'none';
        
            // Restablecer los valores del modal
            const alumnoNombreElemento = document.querySelector('.AlumnoNombre');
            const alumnoDniElemento = document.querySelector('.AlumnoDni');
            const spanEstado = document.querySelector('.estado-text');
            const observacionInput = document.getElementById('observacion-input');
        
            if (alumnoNombreElemento) alumnoNombreElemento.textContent = 'Nombre Apellido';
            if (alumnoDniElemento) alumnoDniElemento.textContent = 'DNI: 12345678';
            if (spanEstado) {
                spanEstado.textContent = 'No marcado';
                spanEstado.className = 'estado-text estado-neutral';
            }
            if (observacionInput) observacionInput.value = '';
        
            // Cambiar el estado del modal a cerrado
            modalAbierto = false;
        }
        document.getElementById('spa-overlay').addEventListener('click', cerrarPasarAsistenciaModal);
        
        // Evento para cerrar el modal cuando se presiona Escape
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape' && modalAbierto) {
                cerrarPasarAsistenciaModal();
            }
        });
        
        
        
        
        
  
 
        const cursosData = {
            {% for curso in cursos %}
                {{ curso.id }}: {
                    id: {{ curso.id }},
                    asignatura: "{{ curso.asignatura.nombre|e('js') }}",
                    anio: "{{ curso.comision.anio|e('js') }}",
                    comision: "{{ curso.comision.comision|e('js') }}",
                    cursadas: [
                        {% for cursada in curso.cursadas %}
                            {
                                id: {{ cursada.id }},
                                alumno: {
                                    id: {{ cursada.alumno.id }},
                                    nombre: "{{ cursada.alumno.nombre|e('js') }}",
                                    apellido: "{{ cursada.alumno.apellido|e('js') }}",
                                    dni: "{{ cursada.alumno.dniPasaporte|e('js') }}"
                                },
                                asistencias: [
                                    {% for asistencia in cursada.getAsistencias %}
                                        {
                                            id: {{ asistencia.id }},
                                            fecha: "{{ asistencia.fecha|date('Y-m-d') }}",  <!-- Ajuste en el formato de la fecha -->
                                            asistencia: "{{ asistencia.asistencia|e('js') }}",
                                            observacion: "{{ asistencia.observacion|e('js') }}"
                                        }{% if not loop.last %},{% endif %}
                                    {% endfor %}
                                ]
                            }{% if not loop.last %},{% endif %}
                        {% endfor %}
                    ]
                }{% if not loop.last %},{% endif %}
            {% endfor %}
        };
        
        

        //Script para representar la fecha actual en el html , class .fecha-actual
        document.addEventListener('DOMContentLoaded', () => {
            const fechaSpan = document.querySelector('.fecha-actual');
            if (fechaSpan) {
                const hoy = new Date();
                const dia = String(hoy.getDate()).padStart(2, '0');
                const mes = String(hoy.getMonth() + 1).padStart(2, '0');
                const anio = hoy.getFullYear();
                fechaSpan.textContent = `Fecha: ${dia}/${mes}/${anio}`;
            }
        });
                document.addEventListener('DOMContentLoaded', () => {
            // Botón "Presente"
            document.getElementById('presente').addEventListener('click', () => {
                actualizarEstado('Presente', true); // Marca como "Presente" y guarda
                setTimeout(avanzarSiEsPosible, 1000); // Avanza al siguiente alumno después de 1 segundo
            });
        
            // Botón "Ausente"
            document.getElementById('ausente').addEventListener('click', () => {
                actualizarEstado('Ausente', true); // Marca como "Ausente" y guarda
                setTimeout(avanzarSiEsPosible, 1000); // Avanza al siguiente alumno después de 1 segundo
            });
        
            // Botón "Media falta"
            document.getElementById('mediafalta').addEventListener('click', () => {
                actualizarEstado('Media falta', true); // Marca como "Media falta" y guarda
                setTimeout(avanzarSiEsPosible, 1000); // Avanza al siguiente alumno después de 1 segundo
            });
        
            // Botón "Justificada"
            document.getElementById('justificada').addEventListener('click', () => {
                actualizarEstado('Justificada', false); // Marca como "Justificada" pero no guarda automáticamente
                document.getElementById('observacion').style.visibility = 'visible';
                document.getElementById('enviar').style.visibility = 'visible';
            });
        });
        
  
        

        
        function hideAsistencia(cursoId) {
            // oculta tabla cursada específica
            let cursadaTable = document.getElementById(`tablaAsistencia_${cursoId}`);
            if (cursadaTable) {
                cursadaTable.style.display = 'none';
            }

            // muestra la tabla curso específica
            let cursoTable = document.getElementById(`tablaTecnicaturas`);
            if (cursoTable) {
                cursoTable.style.display = '';
            }

            // oculta el botón regresar-volver
            let backButton = document.getElementById('backButton');
            if (backButton) {
                backButton.style.display = 'none';
            }
        }

        let indiceActual = 0;  // Índice del alumno actual
        let ActivarEditar = false;  // Variable para activar el modo de edición

// Esta función muestra los datos del alumno en el panel
// Asegúrate de que `cursosData` esté correctamente cargada antes de acceder a ella
    let selectedCursoId = 1;  // Ejemplo de ID seleccionado, reemplaza con tu lógica


    function CambiarEstadoEditar(){
        ActivarEditar = true;  // Cambia el estado de ActivarEditar
        console.log("ActivarEditar:", ActivarEditar);  // Muestra el estado actual en la consola
    }
    // Función para mostrar el alumno
                    function mostrarAlumno(index) {
                console.log("Llamando a mostrarAlumno con índice:", index);
            
                if (index < 0 || index >= cursosData[selectedCursoId].cursadas.length) {
                    console.error("Índice fuera de rango:", index);
                    return;
                }
            
                const alumno = cursosData[selectedCursoId].cursadas[index].alumno;
                const asistencias = cursosData[selectedCursoId].cursadas[index].asistencias;
            
                console.log("Mostrando alumno:", alumno);
                console.log("Asistencias del alumno:", asistencias);
            
                const alumnoNombreElemento = document.querySelector('.AlumnoNombre');
                const alumnoDniElemento = document.querySelector('.AlumnoDni');
                const spanEstado = document.querySelector('.estado-text');
                const observacionInput = document.getElementById('observacion-input');
            
                if (alumnoNombreElemento && alumnoDniElemento) {
                    alumnoNombreElemento.textContent = `${alumno.nombre} ${alumno.apellido}`;
                    alumnoDniElemento.textContent = `DNI: ${alumno.dni}`;
                } else {
                    console.error("No se pudieron encontrar los elementos para actualizar.");
                }
            
                // Recupera la última asistencia del alumno
                const ultimaAsistencia = asistencias.length > 0 ? asistencias[asistencias.length - 1] : null;
            
                if (ultimaAsistencia) {
                    spanEstado.textContent = ultimaAsistencia.asistencia;
                    spanEstado.className = 'estado-text estado-' + ultimaAsistencia.asistencia.toLowerCase().replace(' ', '');
                    observacionInput.value = ultimaAsistencia.observacion || '';
                } else {
                    // Si no hay asistencias, restablece los valores por defecto
                    spanEstado.textContent = 'No marcado';
                    spanEstado.className = 'estado-text estado-neutral';
                    observacionInput.value = '';
                }
            
                // Siempre oculta el campo de observaciones y el botón "Guardar"
                document.getElementById('observacion').style.visibility = 'hidden';
                document.getElementById('enviar').style.visibility = 'hidden';
            }

    // Función para avanzar al siguiente alumno
                function avanzarSiEsPosible() {
            if (indiceActual < cursosData[selectedCursoId].cursadas.length - 1) {
                // Avanza al siguiente alumno
                indiceActual++;
                mostrarAlumno(indiceActual);
            } else {
                // Si es el último alumno, cierra el modal después de 1 segundo
                setTimeout(() => {
                    cerrarPasarAsistenciaModal();
                }, 1000);
            }
        }
    
    function retrocederAlumno() {
        if (indiceActual > 0) {
            indiceActual--;
            mostrarAlumno(indiceActual);
        }
    }
    

    // Cargar el primer alumno al iniciar
    document.addEventListener('DOMContentLoaded', () => {
        mostrarAlumno(indiceActual);
    });

// Asignar el evento al botón "siguiente"
document.getElementById('siguiente').addEventListener('click', avanzarSiEsPosible);
document.getElementById('anterior').addEventListener('click', retrocederAlumno);

// Asegúrate de que el primer alumno se cargue al principio
document.addEventListener('DOMContentLoaded', () => {
    mostrarAlumno(indiceActual);  // Cargar el primer alumno
});
        
        
        function hideListaNueva(cursoId) {
            // Oculta ListaNueva
            let lista = document.getElementById('ListaNueva');
            if (lista) {
                lista.style.display = 'none';
            }
        
            // Mostrar algo al volver (por ejemplo, una tabla general)
            let tablaPrincipal = document.getElementById('tablaTecnicaturas');
            if (tablaPrincipal) {
                tablaPrincipal.style.display = '';
            }
        
            // Ocultar el botón volver
            let backButton = document.getElementById('backButton');
            if (backButton) {
                backButton.style.display = 'none';
            }
        }
        



        //para la segunda tabla de asistencia
        function showAsistencia2(cursoId) {
            // oculta tablas no relevantes
            let tablesToHide = document.querySelectorAll('.tabla_home, .tabla_comision, .tabla_cursada, .tabla_curso');
            tablesToHide.forEach(table => table.style.display = 'none');

            // oculta cursos
            let cursadaTables = document.querySelectorAll('.tabla_curso_cursada');
            cursadaTables.forEach(table => table.style.display = 'none');

            // muestra tabla cursada específica
            let cursadaTable = document.getElementById(`tablaAsistencia2_${cursoId}`);
            if (cursadaTable) {
                cursadaTable.style.display = '';
            }

            // ocultar search
            let search = document.getElementById('searchs');
            if (search) {
                search.style.display = 'none';
            }

            // muestra el botón de regresar, la función hide... recibe id de comision, tecnicatura y asignatura para poder regresar al punto anterior
            let backButton = document.getElementById('backButton');
            if (backButton) {
                backButton.style.display = '';
                backButton.onclick = function() {
                    hideAsistencia2(cursoId);
                };
            }
        }
        function hideAsistencia2(cursoId) {
    // Oculta la tabla de asistencias detalladas
    let cursadaTable = document.getElementById(`tablaAsistencia2_${cursoId}`);
    if (cursadaTable) {
        cursadaTable.style.display = 'none';
    }
    
    // Muestra la tabla de asistencias general
    let asistenciaTable = document.getElementById(`tablaAsistencia_${cursoId}`);
    if (asistenciaTable) {
        asistenciaTable.style.display = '';
    }
    // muestra el botón de regresar, la función hide... recibe id de comision, tecnicatura y asignatura para poder regresar al punto anterior
            let backButton = document.getElementById('backButton');
            if (backButton) {
                backButton.style.display = '';
                backButton.onclick = function() {
                    hideAsistencia(cursoId);
                };
            }

    
}

    </script>

    {# Script para cargar variable si hay sesion iniciada y mantener el punto de pantalla donde se dejo al realizar alguna operacion #}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Evaluar si `comId` está definido y no es nulo
            {% if cursoId is defined and cursoId is not null %}
                // Llamar a showCursada con los IDs de cursada y tecnicatura
                showCursoCursada({{ cursoId|default('null') }});
            {% else %}
            {% endif %}

            {% if cursoId2 is defined and cursoId2 is not null %}
                // Llamar a showCursada con los IDs de cursada y tecnicatura
                showAsistencia({{ cursoId2|default('null') }});
            {% else %}
            {% endif %}
        });
    </script>

    {# Filtro necesario para no acceder un docente a todas los cursos, aqui ademas el super-adminitrador puede acceder sin filtro a todos los registros #}
    <script>
        document.addEventListener("DOMContentLoaded", function() {
            var userEmail = "{{ app.user.email }}";  // aqui obtenemos el correo del usuario logueado
            var userDni = userEmail.split('@')[0];  // Extraer el DNI antes del '@'
            
            // Llamar a la función de filtrado
            if (userEmail !== 'admin@admin.i12') {
                filterTableByDni(userDni);
            }
        });

        function filterTableByDni(dni) {
            // Obtener todas las filas de la tabla
            var rows = document.querySelectorAll("#tablaTecnicaturas tbody tr");
            
            // Recorrer cada fila y mostrar/ocultar según el DNI
            rows.forEach(function(row) {
                var docenteData = row.querySelector('td:first-child').innerText;  // Obtener el texto del primer <td> (Docente)
                if (docenteData.includes(dni)) {
                    row.style.display = '';  // Mostrar la fila
                } else {
                    row.style.display = 'none';  // Ocultar la fila
                }
            });
        }
    </script>

{% endblock %}


{% block body %}
    <div id="body-vistas">
        <h1 id="vistas">Central Docente/s</h1>
        <table class="tabla_home" id="tablaTecnicaturas" border="1">
            <thead>
                <tr>
                    <th>Docente</th>
                    <th>Asignatura</th>
                    <th>Comision</th>
                    <th>Tecnicatura</th>
                    <th>Asistencias</th>
                    <th>Notas</th>
                </tr>
            </thead>
            <tbody>
            {% for cursada_docente in cursada_docentes %}
                <tr>
                    <td>{{ cursada_docente }}</td>
                    <td>{{ cursada_docente.curso.asignatura.nombre }}</td>
                    <td>{{ cursada_docente.curso.comision }}</td>
                    <td>{{ cursada_docente.curso.comision.tecnicatura }}</td>
                    <td>
                        <button onclick="showAsistencia({{ cursada_docente.curso.id }})" class="btn-primary">Asistencia</button>
                        <button onclick="showListaNueva({{ cursada_docente.curso.id }})" class="btn-primary">Lista nueva</button>
                      
                        
                    </td>
                    <td>
                        <button onclick="showCursoCursada({{ cursada_docente.curso.id }})" class="btn-primary">Notas</button>
                    </td>
                </tr>
            {% else %}
                <tr>
                    <td colspan="4">no records found</td>
                </tr>
            {% endfor %}
            </tbody>
        </table>



        {% for curso in cursos %}
            <table id="tablaCursoCursada_{{ curso.id }}" class="tabla_curso_cursada" style="display: none;" border="1">
                <thead>
                    <tr>
                        <th colspan="4">{{ curso.comision.tecnicatura }} -Cursadas de Curso-</th>
                        <th colspan="3"> Año: {{ curso.comision.anio }} Comision: {{ curso.comision.comision }}</th>
                    </tr>
                    <tr>
                        <th>Asignatura :</th>
                        <th colspan="6"> {{ curso.asignatura.nombre }} {{ curso.ciclolectivo }}</th>
                    </tr>
                    <tr>    
                        <th>Curso</th>
                        <th>Cursada</th>
                        <th>N1</th>
                        <th>R1</th>
                        <th>N2</th>
                        <th>R2</th>
                        <th>Condicion</th>
                    </tr>
                </thead>
                <tbody>
                    {% for cursada in curso.cursadas %}
                        {% if cursada.curso.ciclolectivo == curso.ciclolectivo %}
                            <tr>
                                <td>{{ curso.ciclolectivo }}</td>
                                <td>{{ cursada.alumno }}</td>
                                <td>
                                    {{ cursada.getNotaId().parcial }}
                                    <button 
                                        onclick="openModal1({{ cursada.getNotaId().id }}, {{ curso.id }}, 'parcial')" 
                                        {% if cursada.getNotaId().parcial is not null %}style="display: none;"{% endif %}
                                    >
                                        Editar
                                    </button>
                                </td>
                                <td>
                                    {{ cursada.getNotaId().recuperatorio1 }}
                                    <button 
                                        onclick="openModal1({{ cursada.getNotaId().id }}, {{ curso.id }}, 'recuperatorio1')" 
                                        {% if cursada.getNotaId().recuperatorio1 is not null %}style="display: none;"{% endif %}
                                    >
                                        Editar
                                    </button>
                                </td>
                                <td>
                                    {{ cursada.getNotaId().parcial2 }}
                                    <button 
                                        onclick="openModal1({{ cursada.getNotaId().id }}, {{ curso.id }}, 'parcial2')" 
                                        {% if cursada.getNotaId().parcial2 is not null %}style="display: none;"{% endif %}
                                    >
                                        Editar
                                    </button>
                                </td>
                                <td>
                                    {{ cursada.getNotaId().recuperatorio2 }}
                                    <button 
                                        onclick="openModal1({{ cursada.getNotaId().id }}, {{ curso.id }}, 'recuperatorio2')" 
                                        {% if cursada.getNotaId().recuperatorio2 is not null %}style="display: none;"{% endif %}
                                    >
                                        Editar
                                    </button>
                                </td>
                                <td>{{ cursada.condicion }}</td>
                            </tr>
                        {% endif %}
                    {% endfor %}
                </tbody>
            </table>
        {% endfor %}










    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Declarar formattedToday fuera del bloque if
            let formattedToday;
        
            // Verifica si 'today' ya está declarado
            if (typeof formattedToday === 'undefined') {
                const today = new Date();
                const day = String(today.getDate()).padStart(2, '0');
                const month = String(today.getMonth() + 1).padStart(2, '0');
                const year = today.getFullYear();
                formattedToday = `${day}-${month}-${year}`;
            
                // Establecer la fecha generada en un elemento HTML
                document.getElementById('fecha-tabla-asistencia').textContent = 'La fecha de hoy es: ' + formattedToday;
                document.getElementById('hiddenFechaJavaScript').value = formattedToday;
            }
        
            // Comparar la fecha y actualizar la tabla
            const fechaActual = formattedToday;
            document.querySelectorAll('tbody').forEach(tbody => {
                tbody.querySelectorAll('tr').forEach(row => {
                    const fechaAsistencia = row.querySelector('.fecha-asistencia');
                    if (fechaAsistencia) {
                        const asistenciaFecha = fechaAsistencia.textContent.trim();
                        if (asistenciaFecha !== fechaActual) {
                            row.style.display = 'none'; // Oculta las filas que no coinciden con la fecha actual
                        } else {
                            row.style.display = ''; // Muestra las filas que coinciden con la fecha actual
                        }
                    }
                });
            });
        });
        
        
    </script>
    <!-- CAMPO DE LA NUEVA LISTA //////////////////////////////////// -->
    <div class="curso-container" id="ListaNueva"style="display: none;">
        <!-- Título del curso -->
    <h1 class="curso-titulo">Nombre del Curso</h1>
    <div class="curso-info">
        <h2 class="curso-subtitulo">Asignatura: <span>Asignatura Nombre</span></h2>
        <h3 class="curso-subtitulo">Año: <span>--</span> | Comisión: <span>--</span></h3>
    </div>

        <!-- Contenedor de botón y fecha alineados -->
        <div class="fecha-actual-wrapper">
            <a href="{{ path('app_prueba')}}"
            <button class="btn-pasar-lista">
                Ver asistencias
            </button>
            </a>
            <button class="btn-pasar-lista" onclick="abrirPasarAsistenciaModal()">
                📋 Pasar Lista
            </button>
            
            
            
            
            </a>

            <span class="fecha-actual">
                Fecha: DD/MM/AAAA
            </span>
            
        </div>

        <!-- Buscar -->
        <div class="buscador-alumno">
            <label for="dni-buscar">Buscar alumno:</label>
            <div class="input-group">
                <input type="text" id="dni-buscar" class="form-control" placeholder="Por DNI..." aria-label="Buscar por DNI">
                <input type="text" id="nombre-buscar" class="form-control" placeholder="Por Nombre..." aria-label="Buscar por Nombre">
                <input type="text" id="apellido-buscar" class="form-control" placeholder="Por Apellido..." aria-label="Buscar por Apellido">
            </div>
        </div>

        <!-- Tabla de alumnos -->
        <div class="tabla-alumnos-wrapper">
            <table class="curso-tabla">
                <thead>
                    <tr>
                        <th class="col-nombre">Nombre</th>
                        <th class="col-apellido">Apellido</th>
                        <th class="col-dni">DNI</th>
                        <th class="col-asistencia">Asistencia</th>
                        <th class="col-observaciones">Observaciones</th>
                        <th class="col-editar">Opciones</th>
                    </tr>
                </thead>
                <tbody>
                    <tr class="fila-alumno">
                        <td class="alumno-nombre">Juan</td>
                        <td class="alumno-apellido">Pérez</td>
                        <td class="alumno-dni">12345678</td>
                        <td class="alumno-asistencia">
                            <span class="estado-asistencia presente">Presente</span>
                        </td>
                    </tr>
                    <tr class="fila-alumno">
                        <td class="alumno-nombre">Ana</td>
                        <td class="alumno-apellido">García</td>
                        <td class="alumno-dni">87654321</td>
                        <td class="alumno-asistencia">
                            <span class="estado-asistencia ausente">Ausente</span>
                        </td>
                    </tr>
                </tbody>
                <tfoot>
                    <tr>
                        <td colspan="6" class="total-presentes">
                            Alumnos presentes: 1
                        </td>
                    </tr>
                </tfoot>
            </table>
        </div>
    </div>
    <!-- CAMPO DE LA NUEVA LISTA //////////////////////////////////// -->

    <!-- Campo oculto para almacenar la fecha generada por JavaScript -->
    <input type="hidden" id="hiddenFechaJavaScript">

    {% for curso in cursos %}
        <table id="tablaAsistencia_{{ curso.id }}" class="tabla_curso_cursada" style="display: none;" border="1">
            <thead>
                <tr>
                    <th colspan="4">{{ curso.comision.tecnicatura }} - Cursadas de Curso -</th>
                    <th colspan="2"> Año: {{ curso.comision.anio }} Comision: {{ curso.comision.comision }}</th>
                </tr>
                <tr>
                    <th>Asignatura :<p id="fecha-tabla-asistencia">Hoy es:</p></th>
                    <th colspan="4"> {{ curso.asignatura.nombre }} {{ curso.ciclolectivo }}</th>
                    <th colspan="1"><button onclick="showAsistencia2({{ curso.id }})" class="btn-primary">Ver Asistencias</button></th>
                </tr>
                <tr>
                    <th>Curso</th>
                    <th>Cursada</th>
                    <th>Fecha</th>
                    <th>Asistencia</th>
                    <th>Observacion</th>
                    <th>Editar</th>
                </tr>
            </thead>
            <tbody>
                {% for cursada in curso.cursadas %}
                    {% for asistencia in cursada.getAsistencias %}
                        {% set asistenciaFecha = asistencia.fecha|date('d-m-Y') %}
                        <tr>
                                <td>{{ curso.ciclolectivo }}</td>
                                <td>{{ cursada.alumno }}</td>
                                <td class="fecha-asistencia">{{ asistenciaFecha }}</td>
                                <td>{{ asistencia.asistencia }}</td>
                                <td>{{ asistencia.observacion }}</td>
                                <td>
                                    <button onclick="openModal3({{ curso.id }}, {{ cursada.id }}, {{ asistencia.id }})">Editar</button>
                                </td>                         
                        </tr>
                    {% else %}                
           
           
                    {% endfor %}
                {% endfor %}
                {% set currentDate = "now"|date("m-d-Y") %}
                        {% for cursada in curso.cursadas %}
                            {% set asistenciaParaHoy = null %}
                            {% for asistencia in cursada.getAsistencias %}
                                {% if asistencia.fecha|date('m-d-Y') == currentDate %}
                                    {% set asistenciaParaHoy = asistencia %}
                                {% endif %}
                            {% endfor %}
                            <tr>
                                {% if asistenciaParaHoy is not null %}
                                {% else %}
                                    <td>{{ curso.ciclolectivo }}</td>
                                    <td>{{ cursada.alumno }}</td>
                                    <td>
                                        <button onclick="openModal2({{ curso.id }}, {{ cursada.id }}, '{{ cursada.alumno.persona.apellido }}')">Asistencia</button>
                                    </td>
                                    <td colspan="3">No hay asistencias registradas para hoy</td>
                                {% endif %}
                            </tr>
                        {% endfor %}

            </tbody>
        </table>

        <table>
            
        </table>




        <table id="tablaAsistencia2_{{ curso.id }}" class="tabla_curso_cursada" style="display: none;" border="1">
            <thead>
                <tr>
                    <th colspan="6">{{ curso.comision.tecnicatura }} - Cursadas de Curso -</th>
                    <th colspan="2"> Año: {{ curso.comision.anio }} Comision: {{ curso.comision.comision }}</th>
                </tr>
                <tr>
                    <th colspan="2">Asignatura :<p id="fecha-tabla-asistencia"></p></th>
                    <th colspan="6">{{ curso.asignatura.nombre }} {{ curso.ciclolectivo }}</th>
                </tr>
                <tr>
                    <th>Cursada</th>
                    <th>Asistencias</th>
                    <th>Inasistencias</th>
                    <th>Media falta</th>
                    <th>Justificada</th>
                    <th>Total</th>
                    <th>Porcentaje de asistencia</th>
                    <th>Porcentaje de asistencia con justificada</th>
                </tr>
            </thead>
            <tbody>
                {% for cursada in curso.cursadas %}
                    {% set total = 0 %}
                    {% set asistencias = 0 %}
                    {% set inasistencias = 0 %}
                    {% set mediaFalta = 0 %}
                    {% set justificada = 0 %}

                    {% for asistencia in cursada.getAsistencias %}
                        {% set total = total + 1 %}
                        {% if asistencia.asistencia == 'presente' %}
                            {% set asistencias = asistencias + 1 %}
                        {% elseif asistencia.asistencia == 'ausente' %}
                            {% set inasistencias = inasistencias + 1 %}
                        {% elseif asistencia.asistencia == 'mediafalta' %}
                            {% set mediaFalta = mediaFalta + 1 %}
                        {% elseif asistencia.asistencia == 'justificada' %}
                            {% set justificada = justificada + 1 %}
                        {% endif %}
                    {% endfor %}

                    {% if total > 0 %}
                        {% set asistenciasTotales = asistencias + (mediaFalta * 0.5) %}
                        {% set porcentajeAsistencia = (asistenciasTotales / total) * 100 %}
                        {% set porcentajeJustificada = ((asistenciasTotales + justificada) / total) * 100 %}
                    {% else %}
                        {% set porcentajeAsistencia = 0 %}
                        {% set porcentajeJustificada = 0 %}
                    {% endif %}

                    <tr>
                        <td>{{ cursada.alumno }}</td>
                        <td>{{ asistencias }}</td>
                        <td>{{ inasistencias }}</td>
                        <td>{{ mediaFalta }}</td>
                        <td>{{ justificada }}</td>
                        <td>{{ total }}</td>
                        <td>{{ porcentajeAsistencia|number_format(2) }}%</td>
                        <td>{{ porcentajeJustificada|number_format(2) }}%</td>
                    </tr>
                {% endfor %}
            </tbody>
        </table>








    {% endfor %}




   





        {# script asistencias #}
        <script>
            function openModal3(cursoId, cursadaId, asistenciaId) {
                // Generar la URL con los IDs correctos
                const url = "{{ path('editar_asistencias', { 'id': '__id__', 'curso_id': '__cursoId__' }) }}"
                    .replace('__id__', asistenciaId)
                    .replace('__cursoId__', cursoId);
                // Realizar la solicitud fetch
                fetch(url)
                    .then(response => response.text())
                    .then(html => {
                        document.getElementById('modalBody-1').innerHTML = html;
                        document.getElementById('Modal1').style.display = 'block';
                            //asistencia_asistencia    asistencia_fecha       asistencia_observacion     asistencia_cursada

                        // Configurar la fecha actual en los campos de mes, día y año
                        const today = new Date();
                        const dayInput = document.querySelector('#asistencia_fecha_day');
                        const monthInput = document.querySelector('#asistencia_fecha_month');
                        const yearInput = document.querySelector('#asistencia_fecha_year');

                        if (dayInput) {
                            dayInput.value = today.getDate();
                        }
                        if (monthInput) {
                            monthInput.value = today.getMonth() + 1;
                        }
                        if (yearInput) {
                            yearInput.value = today.getFullYear();
                        }


                        const cursadaInput = document.getElementById('asistencia_cursada');
                        const labelCursada = document.querySelector('label[for="asistencia_cursada"]');
                        if (labelCursada) {

                            //labelCursada.style.display = 'none';
                        }
                        if (cursadaInput) {  //aqui evaluo la tec id de la posicion donde estoy y guardo en el input 
                            cursadaInput.value = cursadaId;
                            cursadaInput.setAttribute('readonly', true); // Hacerlo solo lectura -suele no dar resultado al ser opciones desplegadas-
                            cursadaInput.style.display = 'none'; //ocultar el campo evitando que se edite por el usuario
                        }
                
                    })  
                    .catch(error => console.error('Error al cargar el formulario de edición:', error));
            }

        </script>



        {# script asistencias #}
        <script>
            function openModal2(cursoId, cursadaId, estud) {
                
                
                // Generar la URL con los IDs correctos
                const url = "{{ path('nuevas_asistencias', { 'curso_id': '__cursoId__' }) }}"
                    .replace('__cursoId__', cursoId);
                // Realizar la solicitud fetch
                fetch(url)
                    .then(response => response.text())
                    .then(html => {
                        document.getElementById('modalBody-1').innerHTML = html;
                        document.getElementById('Modal1').style.display = 'block';
                            //asistencia_asistencia    asistencia_fecha       asistencia_observacion     asistencia_cursada


                        // Configurar la fecha actual en los campos de mes, día y año
                        const today = new Date();
                        const dayInput = document.querySelector('#asistencia_fecha_day');
                        const monthInput = document.querySelector('#asistencia_fecha_month');
                        const yearInput = document.querySelector('#asistencia_fecha_year');

                        if (dayInput) {
                            dayInput.value = today.getDate();
                        }
                        if (monthInput) {
                            monthInput.value = today.getMonth() + 1;
                        }
                        if (yearInput) {
                            yearInput.value = today.getFullYear();
                        }

                        const inputfecha = document.getElementById('asistencia_fecha');
                        if (inputfecha) {
                            inputfecha.style.display = 'none';
                        }


                        // Construir el texto de fecha y asignarlo al label
                        const day = today.getDate();
                        const month = today.getMonth() + 1;
                        const year = today.getFullYear();
                        const formattedDate = `Fecha: ${day}/${month}/${year}`; // Construir la cadena con la fecha

                        const labelFecha = document.getElementById('label-fecha');
                        if (labelFecha) {
                            labelFecha.textContent = formattedDate; // Asignar el texto al label
                            labelFecha.style.display = 'inline';
                        }


                        const cursadaInput = document.getElementById('asistencia_cursada');
                        const labelCursada = document.querySelector('label[for="asistencia_cursada"]');
                        if (labelCursada) {
                            labelCursada.textContent = 'Estudiante: ' + estud;
                             labelCursada.style.display = 'inline';
                            //labelCursada.style.display = 'none';
                        }
                        if (cursadaInput) {  //aqui evaluo la tec id de la posicion donde estoy y guardo en el input 
                            cursadaInput.value = cursadaId;
                            cursadaInput.setAttribute('readonly', true); // Hacerlo solo lectura -suele no dar resultado al ser opciones desplegadas-
                            cursadaInput.style.display = 'none'; //ocultar el campo evitando que se edite por el usuario
                        }

                
                    })  
                    .catch(error => console.error('Error al cargar el formulario de edición:', error));
            }
        </script>


        <script>
            function openModal1(notaId, cursoId, campo) {
                // Generar la URL con los IDs correctos
                const url = "{{ path('editar_nota', { 'id': '__id__', 'curso_id': '__cursoId__' }) }}"
                    .replace('__id__', notaId)
                    .replace('__cursoId__', cursoId);
                // Realizar la solicitud fetch
                fetch(url)
                    .then(response => response.text())
                    .then(html => {
                        document.getElementById('modalBody-1').innerHTML = html;
                        document.getElementById('Modal1').style.display = 'block';
                        
                        // Ocultar campos según el parámetro 'campo'
                        const campos = ['parcial', 'recuperatorio1', 'parcial2', 'recuperatorio2'];
                        campos.forEach(c => {
                            const label = document.querySelector(`label[for="nota_${c}"]`);
                            const input = document.getElementById(`nota_${c}`);
                            if (c !== campo) {
                                if (label) label.style.display = 'none';
                                if (input) input.style.display = 'none';
                            }
                        });
                    })  
                    .catch(error => console.error('Error al cargar el formulario de edición:', error));
            }

            function closeModal1() {
                document.getElementById('Modal1').style.display = 'none';
                document.getElementById('modalBody-1').innerHTML = ''; // Restablecer el contenido del modal
            }

           let asistenciasMarcadas = {};

    document.addEventListener('keydown', function (event) {
        switch (event.key) {
            case 'ArrowLeft': // Flecha izquierda para retroceder al alumno anterior
                document.getElementById('anterior').click();
                break;
            case 'ArrowRight': // Flecha derecha para avanzar al siguiente alumno
                avanzarSiEsPosible();
                break;
            case 'F1': // F1 para marcar como "Presente"
                event.preventDefault();
                actualizarEstado('Presente', true);  // Actualiza el estado a 'Presente' y guarda
                setTimeout(() => {
                    if (!ActivarEditar) {  // Verifica si ActivarEditar es false
                        avanzarSiEsPosible();  // Avanza al siguiente alumno
                    } else {
                        ActivarEditar = false;  // Cambia ActivarEditar a false
                        cerrarPasarAsistenciaModal();  // Cierra el modal
                        console.log('ActivarEditar:', ActivarEditar);  // Verifica el valor de ActivarEditar
                    }
                }, 1000);
            break;

            case 'F2': // F2 para marcar como "Ausente"
                event.preventDefault();
                actualizarEstado('Ausente', true);  // Actualiza el estado a 'Ausente' y guarda
                setTimeout(() => {
                    if (!ActivarEditar) {  // Verifica si ActivarEditar es false
                        avanzarSiEsPosible();  // Avanza al siguiente alumno
                    } else {
                        ActivarEditar = false;  // Cambia ActivarEditar a false
                        cerrarPasarAsistenciaModal();  // Cierra el modal
                        
                    }
                }, 1000);
            break;
            case 'F3': // F3 para marcar como "Media falta"
                event.preventDefault();
                actualizarEstado('Media falta', true);  // Actualiza el estado a 'Media falta' y guarda
                setTimeout(() => {
                    if (!ActivarEditar) {  // Verifica si ActivarEditar es false
                        avanzarSiEsPosible();  // Avanza al siguiente alumno
                    } else {
                        ActivarEditar = false;  // Cambia ActivarEditar a false
                        cerrarPasarAsistenciaModal();  // Cierra el modal
                       
                    }
                }, 1000);
            break;
            case 'F4': // F4 para marcar como "Justificada"
                event.preventDefault();
                actualizarEstado('Justificada', false); // No guarda automáticamente
                document.getElementById('observacion').style.visibility = 'visible';
                document.getElementById('enviar').style.visibility = 'visible';
            break;
                }
    });

// Función para actualizar el estado del alumno
function actualizarEstado(estado, guardar = true) {
    const spanEstado = document.querySelector('.estado-text');
    spanEstado.textContent = estado;
    spanEstado.className = 'estado-text estado-' + estado.toLowerCase().replace(' ', '');

    const alumnoId = cursosData[selectedCursoId].cursadas[indiceActual].alumno.id;
    let observacion = document.getElementById('observacion-input').value || '';

    if (estado === 'Justificada') {
        document.getElementById('observacion').style.visibility = 'visible';
        document.getElementById('enviar').style.visibility = 'visible';
    } else {
        document.getElementById('observacion').style.visibility = 'hidden';
        document.getElementById('enviar').style.visibility = 'hidden';
        observacion = '';
    }

    // Guarda el estado y la observación en asistenciasMarcadas
    asistenciasMarcadas[alumnoId] = {
        cursada_id: cursosData[selectedCursoId].cursadas[indiceActual].id,
        fecha: new Date().toISOString().split('T')[0], // Fecha actual en formato yyyy-mm-dd
        estado: estado,
        observacion: observacion
    };

    if (guardar) {
        guardarAsistencias();
        const confirmacion = document.getElementById('confirmacion');
        confirmacion.style.visibility = 'visible';
        confirmacion.textContent = '✅ Datos guardados correctamente';
        setTimeout(() => {
            confirmacion.style.visibility = 'hidden';
        }, 2000);
    }

    // Actualiza el contador de alumnos presentes
    actualizarContadorPresentes();
}

// Función para guardar las asistencias marcadas
function guardarAsistencias() {
    const urlGuardar = "{{ path('guardar_asistencia') }}";

    fetch(urlGuardar, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(Object.values(asistenciasMarcadas)),
    })
    .then(response => {
        if (response.ok) {
            console.log('Datos guardados correctamente');
            // Actualiza los datos en el frontend
            fetch(`/local/public/index.php/actualizar-lista-alumnos/${selectedCursoId}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Error al obtener los datos actualizados');
                    }
                    return response.json();
                })
                .then(data => {
                    // Actualiza cursosData con los datos más recientes
                    cursosData[selectedCursoId].cursadas = data.map(cursada => ({
                        id: cursada.id,
                        alumno: {
                            id: cursada.id,
                            nombre: cursada.nombre,
                            apellido: cursada.apellido,
                            dni: cursada.dni,
                        },
                        asistencias: [
                            {
                                asistencia: cursada.asistencia,
                                observacion: cursada.observacion,
                            },
                        ],
                    }));

                    // Actualiza la tabla de alumnos
                    const tbody = document.querySelector('.curso-tabla tbody');
                    tbody.innerHTML = ''; // Limpia la tabla antes de agregar nuevas filas

                    data.forEach(alumno => {
                        const row = document.createElement('tr');
                        row.classList.add('fila-alumno');

                        row.innerHTML = `
                            <td class="alumno-nombre">${alumno.nombre}</td>
                            <td class="alumno-apellido">${alumno.apellido}</td>
                            <td class="alumno-dni">${alumno.dni}</td>
                            <td class="alumno-asistencia">
                                <span class="estado-asistencia ${alumno.asistencia.toLowerCase()}">
                                    ${alumno.asistencia}
                                </span>
                            </td>
                            <td class="alumno-observacion">${alumno.observacion}</td>
                            <td class="alumnoeditar">
                                <button onclick="CambiarEstadoEditar();editarAsistencia(${selectedCursoId}, ${alumno.id})">Editar</button>
                            </td>
                        `;

                        tbody.appendChild(row);
                    });

                    console.log('Tabla actualizada con los datos más recientes.');

                    // Actualiza el contador de alumnos presentes
                    actualizarContadorPresentes();
                })
                .catch(error => console.error('Error al actualizar cursosData:', error));
        } else {
            response.text().then(text => console.error("Error al guardar:", text));
        }
    })
    .catch(error => console.error('Error en la petición:', error));
}

function actualizarContadorPresentes() {
    const filas = document.querySelectorAll('.curso-tabla tbody .fila-alumno');
    let presentes = 0;

    filas.forEach(fila => {
        const estadoElemento = fila.querySelector('.estado-asistencia');
        if (estadoElemento) {
            const estado = estadoElemento.textContent.trim().toLowerCase();
            if (estado === 'presente') {
                presentes++;
            }
        }
    });

    const totalPresentes = document.querySelector('.total-presentes');
    if (totalPresentes) {
        totalPresentes.textContent = `Alumnos presentes: ${presentes}`;
    }
}
document.addEventListener('DOMContentLoaded', () => {
    document.getElementById('enviar').addEventListener('click', () => {
        actualizarEstado('Justificada', true); // Actualiza el estado a "Justificada" y guarda
        setTimeout(() => {
            if (!ActivarEditar) {  // Verifica si ActivarEditar es false
                avanzarSiEsPosible();  // Avanza al siguiente alumno
            } else {
                cerrarPasarAsistenciaModal();  // Cierra el modal
                ActivarEditar = false;  // Cambia ActivarEditar a false
                console.log('ActivarEditar desactivado:', ActivarEditar);  // Verifica el valor de ActivarEditar
            }
        }, 1000);
    });
});

document.addEventListener('DOMContentLoaded', () => {
    const fechaActualElemento = document.getElementById('fecha-actual');
    if (fechaActualElemento) {
        const hoy = new Date();
        const dia = String(hoy.getDate()).padStart(2, '0');
        const mes = String(hoy.getMonth() + 1).padStart(2, '0');
        const anio = hoy.getFullYear();
        fechaActualElemento.textContent = `Fecha: ${dia}/${mes}/${anio}`;
    }
});

document.addEventListener('DOMContentLoaded', () => {
    // Selecciona los campos de búsqueda
    const dniBuscar = document.getElementById('dni-buscar');
    const nombreBuscar = document.getElementById('nombre-buscar');
    const apellidoBuscar = document.getElementById('apellido-buscar');

    // Agrega eventos de entrada (input) a cada campo
    dniBuscar.addEventListener('input', filtrarAlumnos);
    nombreBuscar.addEventListener('input', filtrarAlumnos);
    apellidoBuscar.addEventListener('input', filtrarAlumnos);

    function filtrarAlumnos() {
        // Obtén los valores de los campos de búsqueda
        const dniValor = dniBuscar.value.toLowerCase();
        const nombreValor = nombreBuscar.value.toLowerCase();
        const apellidoValor = apellidoBuscar.value.toLowerCase();

        // Selecciona todas las filas de la tabla de alumnos
        const filas = document.querySelectorAll('.curso-tabla tbody .fila-alumno');

        // Itera sobre cada fila y verifica si coincide con los criterios de búsqueda
        filas.forEach(fila => {
            const dni = fila.querySelector('.alumno-dni').textContent.toLowerCase();
            const nombre = fila.querySelector('.alumno-nombre').textContent.toLowerCase();
            const apellido = fila.querySelector('.alumno-apellido').textContent.toLowerCase();

            // Verifica si la fila coincide con los valores de búsqueda
            if (
                (dni.includes(dniValor) || dniValor === '') &&
                (nombre.includes(nombreValor) || nombreValor === '') &&
                (apellido.includes(apellidoValor) || apellidoValor === '')
            ) {
                fila.style.display = ''; // Muestra la fila si coincide
            } else {
                fila.style.display = 'none'; // Oculta la fila si no coincide
            }
        });
    }
});
        </script>

        <!-- Modal1 para asignar notas a las materias de un docente!!!-->
        <div id="Modal1" class="modal" style="display: none;">
            <div class="modal-content">
                <div class="modal-content21">
                    <span class="close" onclick="closeModal1()">&times;</span>
                    <div id="modalBody-1" class="submodal"></div>
                </div>
            </div>    
        </div>

        <!-- Modal2 para asignar Asistencias!!!-->
        <div id="Modal2" class="modal" style="display: none;">
            <div class="modal-content">
                <div class="modal-content21">
                    <span class="close" onclick="closeModal2()">&times;</span>
                    <div id="modalBody-2" class="submodal"></div>
                </div>
            </div>    
        </div>
           <div id="spa-overlay"></div>
    <div id="spa-content">
    </div>




        {# --- Modal de Pasar Lista, inicialmente oculto --- #}
        <div id="spa-overlay" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; background:rgba(0,0,0,0.5); z-index:999;"></div>
        
        <div id="PasarAsistenciaModal" class="AsistenciaModal1" style="display: none;">
            <div id="alumno-container">
                <div class="alumno-card">
                    <div class="fecha-actual" id="fecha-actual"></div>
                    <h2 class="AlumnoNombre">Nombre Apellido</h2>
                    <p class="AlumnoDni">DNI: 12345678</p>
                    <p id="estado">
                        Estado: <span class="estado-text estado-neutral">No marcado</span>
                    </p>
                    <p id="observacion" style="visibility: hidden;">
                        Observación: <input type="text" id="observacion-input" placeholder="Completar...">
                    </p>
                    <button id="enviar" style="visibility: hidden;" class="btn btn-primary mt-2">Guardar</button>
                    <p id="confirmacion" style="visibility: hidden; color: green; margin-top: 10px;">
                        ✅ Datos guardados correctamente
                    </p>
                </div>
            </div>
        
            <div class="botones mt-3">
                <button id="anterior">⬅️</button>
                <button id="presente">✅ Presente (F1)</button>
                <button id="ausente">❌ Ausente (F2)</button>
                <button id="mediafalta">⏳ Media falta (F3)</button>
                <button id="justificada">📄✅ Justificada (F4)</button>
                <button id="siguiente">➡️</button>
            </div>
        </div>



        <button id="backButton" style="display: none;" class="btn-primary">VOLVER</button>
    
   
    
{% endblock %}
